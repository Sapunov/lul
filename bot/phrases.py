import random

import misc


# TODO: –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ, –∞ —Ç–æ –∫–∞–∫–∞—è-—Ç–æ —Ö—É–π–Ω—è —Å–ª–æ–∂–Ω–∞—è


class IPhrase:

    def get_phrase(self):

        raise NotImplementedError()


class Phrase(IPhrase):

    def __init__(self, name, phrase_text):

        self.name = name
        self.text = phrase_text

    def get_phrase(self):

        return self.text


class RandomPhrase(IPhrase):

    def __init__(self, name, phrases_list):

        assert isinstance(phrases_list, list), '`phrases_list` must be of type list'

        self.name = name
        self.items = phrases_list

    def get_phrase(self):

        variants = random.sample(self.items, 1)
        return variants[0]


PHRASES = [
    RandomPhrase('start', [
        '–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å',
        '–ê–ª–æ—Ö–∞! –°–∫–æ—Ä–µ–µ –ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è —Å–º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å'
        ]),
    Phrase('help', '–ü–æ–º–æ—â–∏ –∂–¥–∞—Ç—å –Ω–µ –æ—Ç –∫–æ–≥–æ, –¥—Ä—É–≥ –º–æ–π'),
    Phrase('unknown', '–ö–∞–∫–æ–µ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ —É –≤–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ –∑–Ω–∞—é —á—Ç–æ –∏ —Å–∫–∞–∑–∞—Ç—å üòû'),
    RandomPhrase('wait', [
        '–°–µ–∫—É–Ω–¥–æ—á–∫—É...',
        '–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç...',
        '–†–∞–±–æ—Ç–∞—é, –æ–∂–∏–¥–∞–π—Ç–µ...']),
    RandomPhrase('edit', [
        '–ó–∞–ø–∏—Å–∞–ª –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é',
        '–•–æ—Ä–æ—à–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
        ]),
    RandomPhrase('saved', [
        '–í—Å–µ, —Å–æ—Ö—Ä–∞–Ω–∏–ª',
        '–ó–∞–Ω–µ—Å –≤ –±–∞–∑—É'
    ])
]


class Phrases(metaclass=misc.Singleton):

    def __init__(self):

        self._phrases = {}

        for phrase in PHRASES:
            if not phrase.name in self._phrases:
                self._phrases[phrase.name] = phrase
            else:
                raise ValueError('Phrase has duplicated name')

    def __getattr__(self, attr_name):

        if attr_name in self._phrases:
            return self._phrases[attr_name].get_phrase()
        else:
            raise ValueError()
